import os
import json
import time
from selenium import webdriver
from selenium.webdriver.chrome.service import Service
from selenium.webdriver.chrome.options import Options
from selenium.webdriver.common.by import By
from webdriver_manager.chrome import ChromeDriverManager

# ================= –ù–∞—Å—Ç—Ä–æ–π–∫–∏ =================
USER_ID = 186699497
URL_BASE = "https://www.ozon.ru"
URL_FAVORITES = f"{URL_BASE}/my/favorites"
USER_COOKIES_DIR = "user_cookies"

# ================= –£—Ç–∏–ª–∏—Ç—ã =================
def get_cookie_file_path(user_id: int) -> str:
    return os.path.join(USER_COOKIES_DIR, f"cookies_{user_id}.json")

def load_cookies(user_id: int):
    path = get_cookie_file_path(user_id)
    if not os.path.exists(path):
        print("‚ö†Ô∏è –§–∞–π–ª –∫—É–∫–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω")
        return None
    with open(path, "r", encoding="utf-8") as f:
        return json.load(f)

# ================= –û—Å–Ω–æ–≤–Ω–æ–π –∫–æ–¥ =================
def test_cookies(user_id: int):
    cookies = load_cookies(user_id)
    if not cookies:
        return False

    chrome_options = Options()
    chrome_options.add_argument("--start-maximized")
    chrome_options.add_argument("--disable-blink-features=AutomationControlled")
    # visible –±—Ä–∞—É–∑–µ—Ä
    driver = webdriver.Chrome(service=Service(ChromeDriverManager().install()), options=chrome_options)

    try:
        driver.get(URL_BASE)
        time.sleep(2)

        print("üç™ –ü—Ä–∏–º–µ–Ω—è–µ–º –∫—É–∫–∏...")
        for c in cookies:
            cookie = {k: v for k, v in c.items() if k in ("name", "value", "domain", "path", "secure", "expiry", "httpOnly")}
            if "domain" in cookie and cookie["domain"].startswith("www."):
                cookie["domain"] = cookie["domain"].lstrip("www.")
            try:
                driver.add_cookie(cookie)
            except Exception as e:
                print(f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –¥–æ–±–∞–≤–∏—Ç—å –∫—É–∫—É {cookie['name']}: {e}")

        driver.get(URL_FAVORITES)
        time.sleep(5)  # –∂–¥—ë–º –ø–æ–¥–≥—Ä—É–∑–∫—É —Å—Ç—Ä–∞–Ω–∏—Ü—ã

        # –ø—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ –∏–º–µ–Ω–∏ –ø—Ä–æ—Ñ–∏–ª—è
        try:
            profile_span = driver.find_element(By.CSS_SELECTOR, "div.bq03_0_2-a span.tsCompact300XSmall")
            profile_name = profile_span.text.strip()
            if profile_name.lower() == "–≤–æ–π—Ç–∏":
                print("‚ùå –ö—É–∫–∏ —É—Å—Ç–∞—Ä–µ–ª–∏ –∏–ª–∏ –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç. –¢—Ä–µ–±—É–µ—Ç—Å—è —Ä—É—á–Ω–æ–π –≤—Ö–æ–¥.")
                return False
            else:
                print(f"‚úÖ –ö—É–∫–∏ –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω—ã, –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {profile_name}")
        except Exception as e:
            print(f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –∏–º—è –ø—Ä–æ—Ñ–∏–ª—è: {e}")
            return False

        # –º–æ–∂–Ω–æ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ –≤—ã–≤–µ—Å—Ç–∏ –∑–∞–≥–æ–ª–æ–≤–∫–∏ —Ç–æ–≤–∞—Ä–æ–≤
        try:
            products = driver.find_elements(By.CSS_SELECTOR, "span.tsBody500Medium")
            print(f"üîπ –ù–∞–π–¥–µ–Ω–æ —Ç–æ–≤–∞—Ä–æ–≤ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ: {len(products)}")
            for p in products[:10]:
                print("-", p.text)
        except Exception:
            pass

        input("–ù–∞–∂–º–∏—Ç–µ Enter, —á—Ç–æ–±—ã –∑–∞–∫—Ä—ã—Ç—å –±—Ä–∞—É–∑–µ—Ä...")
        return True
    finally:
        driver.quit()

if __name__ == "__main__":
    valid = test_cookies(USER_ID)
    if not valid:
        print("‚ùå –ö—É–∫–∏ –Ω–µ–¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω—ã, –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –≤–æ–π—Ç–∏ –∑–∞–Ω–æ–≤–æ.")
