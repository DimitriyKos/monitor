import sqlite3
from aiogram import types
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton
from states import user_states

DB_FILE = "db.sqlite"
PAGE_SIZE = 100    # –º–∞–∫—Å–∏–º—É–º —Ç–æ–≤–∞—Ä–æ–≤ –∑–∞ —Ä–∞–∑ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏
MAX_CHARS = 4000   # –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ —Å–∏–º–≤–æ–ª–æ–≤ –≤ –æ–¥–Ω–æ–º —Å–æ–æ–±—â–µ–Ω–∏–∏

# —Å–ø–∏—Å–æ–∫ –∫–Ω–æ–ø–æ–∫ –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é, –∫–æ—Ç–æ—Ä—ã–µ –ø—Ä–µ—Ä—ã–≤–∞—é—Ç —Ä–µ–∂–∏–º —É–¥–∞–ª–µ–Ω–∏—è
EXIT_DELETE_BUTTONS = [
    "üîç –ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Ü–µ–Ω—ã",
    "‚ûï –î–æ–±–∞–≤–∏—Ç—å —Ç–æ–≤–∞—Ä",
    "‚ùå –£–¥–∞–ª–∏—Ç—å —Ç–æ–≤–∞—Ä",
    "üìã –ú–æ–∏ —Ç–æ–≤–∞—Ä—ã",
    "üìä –ó–∞–ø—É—Å—Ç–∏—Ç—å –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ —Ü–µ–Ω –Ω–∞ 7 –¥–Ω–µ–π",
    "üì• –ò–º–ø–æ—Ä—Ç –∏–∑–±—Ä–∞–Ω–Ω–æ–≥–æ Ozon (–ª–æ–∫–∞–ª—å–Ω–æ)"
]

def fetch_products(user_id: str):
    """–ü–æ–ª—É—á–∞–µ–º –≤—Å–µ —Ç–æ–≤–∞—Ä—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ –±–∞–∑—ã"""
    conn = sqlite3.connect(DB_FILE)
    cursor = conn.cursor()
    cursor.execute("""
        SELECT product_name, product_url
        FROM products
        WHERE user_id=?
    """, (user_id,))
    products = cursor.fetchall()
    conn.close()
    return products


def format_products_chunk(products, start_idx=0):
    """
    –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –±–ª–æ–∫ —Ç–æ–≤–∞—Ä–æ–≤ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Ç–µ–∫—Å—Ç –∏ –∏–Ω–¥–µ–∫—Å –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –≤–∫–ª—é—á—ë–Ω–Ω–æ–≥–æ —Ç–æ–≤–∞—Ä–∞
    """
    text = ""
    last_idx = start_idx
    for idx, (name, url) in enumerate(products[start_idx:], start=start_idx + 1):
        display_name = name or "(–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è)"
        block = f"{idx}. üì¶ {display_name}\n<a href='{url}'>—Å—Å—ã–ª–∫–∞</a>\n"
        if len(text) + len(block) > MAX_CHARS:
            break
        text += block
        last_idx = idx
    return text, last_idx


# --------------------- –®–∞–≥ 1: –∑–∞–ø—É—Å–∫ —É–¥–∞–ª–µ–Ω–∏—è ---------------------
async def delete_product_handler(message: types.Message):
    user_id = str(message.from_user.id)
    products = fetch_products(user_id)

    if not products:
        await message.answer("–£ –≤–∞—Å –Ω–µ—Ç –¥–æ–±–∞–≤–ª–µ–Ω–Ω—ã—Ö —Ç–æ–≤–∞—Ä–æ–≤ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è.")
        return

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–ø–∏—Å–æ–∫ –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏
    user_states[user_id] = {"mode": "deleting_product", "products": products}

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–µ—Ä–≤—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É
    text, last_idx = format_products_chunk(products, start_idx=0)
    total = len(products)
    text = f"üì¶ –í—ã–±–µ—Ä–∏—Ç–µ —Ç–æ–≤–∞—Ä –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è (–≤–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä) –∏–ª–∏ –Ω–∞–ø–∏—à–∏—Ç–µ '—É–¥–∞–ª–∏—Ç—å –≤—Å–µ':\n\n{text}"

    kb = InlineKeyboardMarkup(inline_keyboard=[])
    if last_idx < total:
        kb.inline_keyboard.append([
            InlineKeyboardButton(text="‚è≠ –ü–æ–∫–∞–∑–∞—Ç—å –µ—â—ë", callback_data=f"del_more:{last_idx}")
        ])
        kb.inline_keyboard.append([
            InlineKeyboardButton(text=f"üìã –ü–æ–∫–∞–∑–∞—Ç—å –≤—Å–µ ({total})", callback_data="del_all")
        ])

    await message.answer(text, parse_mode="HTML", reply_markup=kb)


# --------------------- –®–∞–≥ 2: –ø–∞–≥–∏–Ω–∞—Ü–∏—è ---------------------
async def show_more_delete_products(callback: types.CallbackQuery):
    user_id = str(callback.from_user.id)
    state = user_states.get(user_id)
    if not state or state.get("mode") != "deleting_product":
        await callback.answer("‚ùå –†–µ–∂–∏–º —É–¥–∞–ª–µ–Ω–∏—è –Ω–µ –∞–∫—Ç–∏–≤–µ–Ω.")
        return

    products = state["products"]
    start_idx = int(callback.data.split(":")[1])
    text, last_idx = format_products_chunk(products, start_idx=start_idx)
    total = len(products)
    text = f"üì¶ –í—ã–±–µ—Ä–∏—Ç–µ —Ç–æ–≤–∞—Ä –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è (–≤–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä) –∏–ª–∏ –Ω–∞–ø–∏—à–∏—Ç–µ '—É–¥–∞–ª–∏—Ç—å –≤—Å–µ':\n\n{text}"

    kb = InlineKeyboardMarkup(inline_keyboard=[])
    if last_idx < total:
        kb.inline_keyboard.append([
            InlineKeyboardButton(text="‚è≠ –ü–æ–∫–∞–∑–∞—Ç—å –µ—â—ë", callback_data=f"del_more:{last_idx}")
        ])
        kb.inline_keyboard.append([
            InlineKeyboardButton(text=f"üìã –ü–æ–∫–∞–∑–∞—Ç—å –≤—Å–µ ({total})", callback_data="del_all")
        ])

    await callback.message.answer(text, parse_mode="HTML", reply_markup=kb)
    await callback.answer()


# --------------------- –®–∞–≥ 3: –ø–æ–∫–∞–∑–∞—Ç—å –≤—Å–µ ---------------------
async def show_all_delete_products(callback: types.CallbackQuery):
    user_id = str(callback.from_user.id)
    state = user_states.get(user_id)
    if not state or state.get("mode") != "deleting_product":
        await callback.answer("‚ùå –†–µ–∂–∏–º —É–¥–∞–ª–µ–Ω–∏—è –Ω–µ –∞–∫—Ç–∏–≤–µ–Ω.")
        return

    products = state["products"]
    total = len(products)
    start_idx = 0
    while start_idx < total:
        text, last_idx = format_products_chunk(products, start_idx=start_idx)
        text = f"üì¶ –í—ã–±–µ—Ä–∏—Ç–µ —Ç–æ–≤–∞—Ä –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è (–≤–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä) –∏–ª–∏ –Ω–∞–ø–∏—à–∏—Ç–µ '—É–¥–∞–ª–∏—Ç—å –≤—Å–µ':\n\n{text}"
        await callback.message.answer(text, parse_mode="HTML")
        start_idx = last_idx

    await callback.answer()


# --------------------- –®–∞–≥ 4: –æ–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ ---------------------
async def process_delete_product(message: types.Message):
    user_id = str(message.from_user.id)

    # --- –ü—Ä–µ—Ä—ã–≤–∞–µ–º —Ä–µ–∂–∏–º —É–¥–∞–ª–µ–Ω–∏—è, –µ—Å–ª–∏ –Ω–∞–∂–∞—Ç–∞ –∫–Ω–æ–ø–∫–∞ –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é ---
    if message.text in EXIT_DELETE_BUTTONS:
        state = user_states.get(user_id)
        if isinstance(state, dict) and state.get("mode") == "deleting_product":
            user_states.pop(user_id, None)
        return  # —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–π–¥—ë—Ç –≤ –æ—Å–Ω–æ–≤–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–æ–∫

    state = user_states.get(user_id)
    if not state or state.get("mode") != "deleting_product":
        return  # –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –≤ —Ä–µ–∂–∏–º–µ —É–¥–∞–ª–µ–Ω–∏—è

    products = state["products"]
    text = message.text.strip().lower()

    # –£–¥–∞–ª–µ–Ω–∏–µ –≤—Å–µ—Ö —Ç–æ–≤–∞—Ä–æ–≤
    if text == "—É–¥–∞–ª–∏—Ç—å –≤—Å–µ":
        conn = sqlite3.connect(DB_FILE)
        cursor = conn.cursor()
        cursor.execute("DELETE FROM products WHERE user_id=?", (user_id,))
        conn.commit()
        conn.close()
        user_states[user_id] = None
        await message.answer(f"‚úÖ –í—Å–µ {len(products)} —Ç–æ–≤–∞—Ä–æ–≤ —É–¥–∞–ª–µ–Ω—ã.")
        return

    selected_index = None
    selected_url = None

    if text.isdigit():
        index = int(text) - 1
        if 0 <= index < len(products):
            selected_index = index
            selected_url = products[index][1]

    if selected_index is None:
        await message.answer("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ —Ç–æ–≤–∞—Ä. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑.")
        return

    # –£–¥–∞–ª—è–µ–º –≤—ã–±—Ä–∞–Ω–Ω—ã–π —Ç–æ–≤–∞—Ä
    conn = sqlite3.connect(DB_FILE)
    cursor = conn.cursor()
    cursor.execute("DELETE FROM products WHERE user_id=? AND product_url=?", (user_id, selected_url))
    conn.commit()
    conn.close()

    await message.answer(f"‚úÖ –¢–æ–≤–∞—Ä '{products[selected_index][0] or selected_url}' —É–¥–∞–ª—ë–Ω.")

    # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ —Å–ø–∏—Å–∫–∞
    updated_products = products[:selected_index] + products[selected_index+1:]
    if updated_products:
        user_states[user_id]["products"] = updated_products
    else:
        user_states[user_id] = None
