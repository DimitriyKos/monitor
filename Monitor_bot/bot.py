import asyncio
from aiogram import Bot, Dispatcher, types, F
from aiogram.types import ReplyKeyboardMarkup, KeyboardButton
from aiogram.filters import Command
from ozon_favorites_local import manual_login_and_save_cookies, import_favorites_for_user, finalize_manual_login
from manager_add import add_product_handler, process_product_link, user_states
from manager_parsing import check_prices_for_user
from manager_total import show_user_products, show_more_products, show_all_products
from manager_delete import delete_product_handler, process_delete_product, show_more_delete_products, show_all_delete_products
from handlers import payment
from manager_fast_check import fast_check_products

API_TOKEN = "8479990520:AAE0UaNSzf-E3x5i-m0l7pJ67TtJI4bwe3k"

# --------------------- –û—Å–Ω–æ–≤–Ω–∞—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞ ---------------------
main_kb = ReplyKeyboardMarkup(
    keyboard=[
        [KeyboardButton(text="üîç –ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Ü–µ–Ω—ã")],
        [KeyboardButton(text="‚ö° –ë—ã—Å—Ç—Ä–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ —Ü–µ–Ω")],
        [KeyboardButton(text="‚ûï –î–æ–±–∞–≤–∏—Ç—å —Ç–æ–≤–∞—Ä")],
        [KeyboardButton(text="‚ùå –£–¥–∞–ª–∏—Ç—å —Ç–æ–≤–∞—Ä")],
        [KeyboardButton(text="üìã –ú–æ–∏ —Ç–æ–≤–∞—Ä—ã")],
        [KeyboardButton(text="üìä –ó–∞–ø—É—Å—Ç–∏—Ç—å –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ —Ü–µ–Ω –Ω–∞ 7 –¥–Ω–µ–π")],
        [KeyboardButton(text="üì• –ò–º–ø–æ—Ä—Ç –∏–∑–±—Ä–∞–Ω–Ω–æ–≥–æ Ozon (–ª–æ–∫–∞–ª—å–Ω–æ)")]
    ],
    resize_keyboard=True
)

# –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è —Ä—É—á–Ω–æ–≥–æ –≤—Ö–æ–¥–∞ (–¥–æ–±–∞–≤–ª—è–µ—Ç—Å—è –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–∏)
manual_login_kb = ReplyKeyboardMarkup(
    keyboard=[
        [KeyboardButton(text="‚úÖ –ì–æ—Ç–æ–≤–æ")]
    ],
    resize_keyboard=True
)

# --------------------- –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ ---------------------
async def start_handler(message: types.Message):
    await message.answer(
        "–ü—Ä–∏–≤–µ—Ç! üëã –Ø –±–æ—Ç –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è —Ü–µ–Ω –Ω–∞ –º–∞—Ä–∫–µ—Ç–ø–ª–µ–π—Å–µ Ozon. "
        "–¢—ã –º–æ–∂–µ—à—å –≤—ã–≥—Ä—É–∑–∏—Ç—å –≤—Å–µ —Ç–æ–≤–∞—Ä—ã –∏–∑ –∏–∑–±—Ä–∞–Ω–Ω–æ–≥–æ –∏–ª–∏ –¥–æ–±–∞–≤–∏—Ç—å —Ç–æ–≤–∞—Ä—ã –≤—Ä—É—á–Ω—É—é.\n\n–í—ã–±–µ—Ä–∏ –¥–µ–π—Å—Ç–≤–∏–µ –Ω–∏–∂–µ:",
        reply_markup=main_kb
    )

# –°–æ—Å—Ç–æ—è–Ω–∏–µ –æ–∂–∏–¥–∞–Ω–∏—è —Ä—É—á–Ω–æ–≥–æ –≤—Ö–æ–¥–∞
manual_login_waiting = {}

# --------------------- –ò–º–ø–æ—Ä—Ç –∏–∑–±—Ä–∞–Ω–Ω–æ–≥–æ ---------------------
async def import_favorites_local_handler(message: types.Message):
    user_id = message.from_user.id
    bot = message.bot

    await message.answer("üöÄ –ü—ã—Ç–∞–µ–º—Å—è –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å –≤–∞—à–∏ —Ç–æ–≤–∞—Ä—ã –∏–∑ Ozon...", reply_markup=main_kb)

    # –ü—Ä–æ–±—É–µ–º –∏–º–ø–æ—Ä—Ç —á–µ—Ä–µ–∑ –∫—É–∫–∏
    result = await asyncio.to_thread(import_favorites_for_user, user_id)

    if result["ok"]:
        await message.answer(f"‚úÖ –ò–º–ø–æ—Ä—Ç –∑–∞–≤–µ—Ä—à—ë–Ω: –¥–æ–±–∞–≤–ª–µ–Ω–æ {result['count']} —Ç–æ–≤–∞—Ä–æ–≤.", reply_markup=main_kb)
    else:
        # –ö—É–∫–∏ –Ω–µ–¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω—ã ‚Äî –∑–∞–ø—É—Å–∫–∞–µ–º —Ä—É—á–Ω–æ–π –≤—Ö–æ–¥
        await manual_login_and_save_cookies(user_id, bot)
        await message.answer(
            "‚ùó–ü–æ—Å–ª–µ –≤—Ö–æ–¥–∞ –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É ¬´–ì–æ—Ç–æ–≤–æ¬ª –Ω–∏–∂–µ, —á—Ç–æ–±—ã —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –∫—É–∫–∏ –∏ –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å...",
            reply_markup=manual_login_kb
        )
        manual_login_waiting[user_id] = True

# --------------------- –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ "–ì–æ—Ç–æ–≤–æ" ---------------------
async def manual_login_done_handler(message: types.Message):
    user_id = message.from_user.id
    if manual_login_waiting.get(user_id):
        success, msg = await asyncio.to_thread(finalize_manual_login, user_id)
        await message.answer(msg, reply_markup=main_kb)
        if success:
            # –ü–æ—Å–ª–µ —É—Å–ø–µ—à–Ω–æ–≥–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∫—É–∫–∏ –∏–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –∏–∑–±—Ä–∞–Ω–Ω–æ–µ
            result = await asyncio.to_thread(import_favorites_for_user, user_id)
            if result["ok"]:
                await message.answer(f"‚úÖ –ò–º–ø–æ—Ä—Ç –∑–∞–≤–µ—Ä—à—ë–Ω: –¥–æ–±–∞–≤–ª–µ–Ω–æ {result['count']} —Ç–æ–≤–∞—Ä–æ–≤.", reply_markup=main_kb)
            else:
                await message.answer(f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å –∏–∑–±—Ä–∞–Ω–Ω–æ–µ: {result['msg']}", reply_markup=main_kb)
        manual_login_waiting[user_id] = False

# --------------------- –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è ---------------------
async def main():
    bot = Bot(token=API_TOKEN)
    dp = Dispatcher()

    # –ö–æ–º–∞–Ω–¥–∞ /start
    dp.message.register(start_handler, Command("start"))

    # –ö–Ω–æ–ø–∫–∏ –º–µ–Ω—é
    dp.message.register(check_prices_for_user, lambda msg: msg.text == "üîç –ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Ü–µ–Ω—ã")
    dp.message.register(delete_product_handler, lambda msg: msg.text == "‚ùå –£–¥–∞–ª–∏—Ç—å —Ç–æ–≤–∞—Ä")
    dp.message.register(show_user_products, lambda msg: msg.text == "üìã –ú–æ–∏ —Ç–æ–≤–∞—Ä—ã")
    dp.message.register(add_product_handler, lambda msg: msg.text == "‚ûï –î–æ–±–∞–≤–∏—Ç—å —Ç–æ–≤–∞—Ä")
    dp.message.register(import_favorites_local_handler, lambda msg: msg.text == "üì• –ò–º–ø–æ—Ä—Ç –∏–∑–±—Ä–∞–Ω–Ω–æ–≥–æ Ozon (–ª–æ–∫–∞–ª—å–Ω–æ)")
    dp.message.register(fast_check_products, lambda msg: msg.text == "‚ö° –ë—ã—Å—Ç—Ä–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ —Ü–µ–Ω")

    # –ö–Ω–æ–ø–∫–∞ "–ì–æ—Ç–æ–≤–æ"
    dp.message.register(manual_login_done_handler, lambda msg: msg.text == "‚úÖ –ì–æ—Ç–æ–≤–æ")

    # --------------------- Callback –¥–ª—è inline-–∫–Ω–æ–ø–æ–∫ ---------------------
    dp.callback_query.register(show_more_products, lambda c: c.data.startswith("more:"))
    dp.callback_query.register(show_all_products, lambda c: c.data == "all")
    dp.callback_query.register(show_more_delete_products, lambda c: c.data.startswith("del_more:"))
    dp.callback_query.register(show_all_delete_products, lambda c: c.data == "del_all")

    # –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ —á–µ—Ä–µ–∑ –æ–ø–ª–∞—Ç—É
    async def start_monitoring_wrapper(message: types.Message):
        await payment.send_invoice_handler(message, bot)
    dp.message.register(start_monitoring_wrapper, lambda msg: msg.text == "üìä –ó–∞–ø—É—Å—Ç–∏—Ç—å –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ —Ü–µ–Ω –Ω–∞ 7 –¥–Ω–µ–π")

    # –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π –≤ —Ä–µ–∂–∏–º–µ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è/—É–¥–∞–ª–µ–Ω–∏—è
    async def handle_message(message: types.Message):
        user_id = str(message.from_user.id)
        if user_states.get(user_id) == "adding_product":
            await process_product_link(message)
            return
        state = user_states.get(user_id)
        if isinstance(state, dict) and state.get("mode") == "deleting_product":
            await process_delete_product(message)
            return
    dp.message.register(handle_message, lambda msg: True)

    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –ø–ª–∞—Ç–µ–∂–µ–π
    dp.message.register(lambda msg: payment.send_invoice_handler(msg, bot), Command("donate"))
    dp.pre_checkout_query.register(payment.pre_checkout_handler)
    dp.message.register(lambda msg: payment.success_payment_handler(msg, bot), F.successful_payment)
    dp.message.register(payment.pay_support_handler, Command("paysupport"))

    print("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω ‚úÖ")
    await dp.start_polling(bot)

if __name__ == "__main__":
    asyncio.run(main())
