# manager_add.py
import sqlite3
from datetime import datetime
from aiogram import types
from states import user_states  # –æ–±—â–∏–π —Å–ª–æ–≤–∞—Ä—å —Å–æ—Å—Ç–æ—è–Ω–∏–π
from typing import Optional
from html import escape
from manager_parsing import download_ozon_html, parse_html_file
from manager_write_db import write_or_update_product

DB_FILE = "db.sqlite"


# --------------------- –§—É–Ω–∫—Ü–∏—è –≤–∞–ª–∏–¥–∞—Ü–∏–∏ —Å—Å—ã–ª–∫–∏ ---------------------
def validate_ozon_url(url: str) -> Optional[str]:
    """
    –ü—Ä–æ–≤–µ—Ä—è–µ—Ç, —á—Ç–æ —Å—Å—ã–ª–∫–∞ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞—è –¥–ª—è Ozon:
    - –¥–æ–ª–∂–Ω–∞ —Å–æ–¥–µ—Ä–∂–∞—Ç—å 'ozon'
    - –¥–æ–ª–∂–Ω–∞ —Å–æ–¥–µ—Ä–∂–∞—Ç—å 'product' –∏–ª–∏ —Å–æ–∫—Ä–∞—â—ë–Ω–Ω—ã–µ –≤–∞—Ä–∏–∞–Ω—Ç—ã '/t/' –∏–ª–∏ '/s/'
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –æ–±—Ä–µ–∑–∞–Ω–Ω—É—é —Å—Å—ã–ª–∫—É –±–µ–∑ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ –ø–æ—Å–ª–µ '?' –∏–ª–∏ None –µ—Å–ª–∏ –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞—è.
    """
    url = url.strip()
    if not url:
        return None
    url_base = url.split("?")[0]  # —É–±–∏—Ä–∞–µ–º –≤—Å–µ GET-–ø–∞—Ä–∞–º–µ—Ç—Ä—ã
    if "ozon" not in url_base.lower():
        return None
    if not any(x in url_base.lower() for x in ["product", "/t/", "/s/"]):
        return None
    return url_base


# --------------------- –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ "‚ûï –î–æ–±–∞–≤–∏—Ç—å —Ç–æ–≤–∞—Ä" ---------------------
async def add_product_handler(message: types.Message):
    """
    –ü–µ—Ä–µ–≤–æ–¥–∏—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ —Ä–µ–∂–∏–º –æ–∂–∏–¥–∞–Ω–∏—è —Å—Å—ã–ª–∫–∏
    """
    user_id = str(message.from_user.id)
    user_states[user_id] = "adding_product"
    await message.answer("üìé –û—Ç–ø—Ä–∞–≤—å—Ç–µ —Å—Å—ã–ª–∫—É –Ω–∞ —Ç–æ–≤–∞—Ä, –∫–æ—Ç–æ—Ä—ã–π —Ö–æ—Ç–∏—Ç–µ –¥–æ–±–∞–≤–∏—Ç—å:")


# --------------------- –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–æ–ª—É—á–µ–Ω–Ω–æ–π —Å—Å—ã–ª–∫–∏ ---------------------
async def process_product_link(message: types.Message):
    """
    –ü–æ–ª—É—á–∞–µ—Ç —Å—Å—ã–ª–∫—É —Ç–æ–≤–∞—Ä–∞ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç –µ—ë –≤ –ë–î,
    —Å—Ä–∞–∑—É –ø–∞—Ä—Å–∏—Ç –∏ –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç –Ω–∞–∑–≤–∞–Ω–∏–µ –∏ —Ü–µ–Ω—É.
    –ü–æ–¥–¥–µ—Ä–∂–∫–∞ –Ω–µ—Å–∫–æ–ª—å–∫–∏—Ö —Å—Å—ã–ª–æ–∫ —Å—Ä–∞–∑—É.
    """
    user_id = str(message.from_user.id)
    if user_states.get(user_id) != "adding_product":
        return  # –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º, –µ—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –≤ —Ä–µ–∂–∏–º–µ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è

    raw_urls = message.text.strip().split()  # –ø–æ–¥–¥–µ—Ä–∂–∫–∞ –º–Ω–æ–∂–µ—Å—Ç–≤–∞ —Å—Å—ã–ª–æ–∫ —á–µ—Ä–µ–∑ –ø—Ä–æ–±–µ–ª/–Ω–æ–≤—É—é —Å—Ç—Ä–æ–∫—É
    if not raw_urls:
        await message.answer("‚ùå –°—Å—ã–ª–æ–∫ –Ω–µ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–æ. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ö–æ—Ç—è –±—ã –æ–¥–Ω—É —Å—Å—ã–ª–∫—É.")
        return

    # --- –ú–≥–Ω–æ–≤–µ–Ω–Ω—ã–π —Ñ–∏–¥–±—ç–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é ---
    await message.answer(f"‚è≥ –ü–æ–ª—É—á–µ–Ω–æ {len(raw_urls)} —Å—Å—ã–ª–æ–∫! –ù–∞—á–∏–Ω–∞–µ–º –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ —Ç–æ–≤–∞—Ä–æ–≤...")

    added_products = []

    for raw_url in raw_urls:
        product_url = validate_ozon_url(raw_url)

        if not product_url:
            await message.answer(f"‚ùå –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞—è —Å—Å—ã–ª–∫–∞: {raw_url}")
            continue

        check_time = datetime.now().strftime("%Y-%m-%d %H:%M:%S")

        conn = sqlite3.connect(DB_FILE)
        cursor = conn.cursor()

        # ------------------- –î–æ–±–∞–≤–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è -------------------
        cursor.execute("""
            INSERT OR REPLACE INTO users(user_id, chat_id, first_name, last_name, username)
            VALUES (?, ?, ?, ?, ?)
        """, (
            user_id,
            message.chat.id,
            message.from_user.first_name,
            message.from_user.last_name,
            message.from_user.username
        ))

        # ------------------- –°–æ–∑–¥–∞–µ–º —Ç–∞–±–ª–∏—Ü—É products -------------------
        cursor.execute("""
            CREATE TABLE IF NOT EXISTS products (
                user_id TEXT NOT NULL,
                product_url TEXT NOT NULL,
                product_name TEXT,
                last_check_time TEXT,
                last_price_card INTEGER,
                last_price_no_card INTEGER,
                day_start_time TEXT,
                day_price_card INTEGER,
                day_price_no_card INTEGER,
                week_start_time TEXT,
                week_price_card INTEGER,
                week_price_no_card INTEGER,
                html_file TEXT,
                PRIMARY KEY(user_id, product_url),
                FOREIGN KEY(user_id) REFERENCES users(user_id)
            )
        """)

        # ------------------- –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ —Ç–æ–≤–∞—Ä–∞ -------------------
        cursor.execute("SELECT 1 FROM products WHERE user_id=? AND product_url=?", (user_id, product_url))
        if cursor.fetchone():
            await message.answer(f"‚ö†Ô∏è –¢–æ–≤–∞—Ä —É–∂–µ –¥–æ–±–∞–≤–ª–µ–Ω: {product_url}")
            conn.close()
            continue

        # ------------------- –í—Å—Ç–∞–≤–ª—è–µ–º –Ω–æ–≤—ã–π —Ç–æ–≤–∞—Ä -------------------
        cursor.execute("""
            INSERT INTO products(
                user_id, product_url, product_name, last_check_time,
                last_price_card, last_price_no_card,
                day_start_time, day_price_card, day_price_no_card,
                week_start_time, week_price_card, week_price_no_card,
                html_file
            ) VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)
        """, (
            user_id,
            product_url,
            "",  # product_name –ø–æ–∫–∞ –ø—É—Å—Ç–æ–π
            check_time,
            None, None,  # last_price_card, last_price_no_card
            check_time, None, None,  # day_start_time, day_price_card, day_price_no_card
            check_time, None, None,  # week_start_time, week_price_card, week_price_no_card
            ""  # html_file
        ))
        conn.commit()
        conn.close()

        # ------------------- –°—Ä–∞–∑—É –∫–∞—á–∞–µ–º HTML –∏ –ø–∞—Ä—Å–∏–º -------------------
        try:
            html_file = download_ozon_html(product_url, user_id)
            product_name, price_card, price_no_card = parse_html_file(html_file)

            # –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –≤ –ë–î
            write_or_update_product(user_id, product_url, product_name, price_card, price_no_card)

            # –ó–∞–ø–æ–º–∏–Ω–∞–µ–º –¥–ª—è –æ—Ç–≤–µ—Ç–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
            added_products.append((product_name, price_card, price_no_card, product_url))

        except Exception as e:
            await message.answer(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ {product_url}: {e}")

    # –§–æ—Ä–º–∏—Ä—É–µ–º –∏—Ç–æ–≥–æ–≤—ã–π –æ—Ç–≤–µ—Ç
    if added_products:
        response = "‚úÖ –î–æ–±–∞–≤–ª–µ–Ω—ã —Ç–æ–≤–∞—Ä—ã:\n\n"
        for name, price_card, price_no_card, url in added_products:
            safe_name = escape(name) if name else "–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è"
            pc_text = f"{price_card} ‚ÇΩ (—Å –∫–∞—Ä—Ç–æ–π)" if price_card else "‚Äî"
            pnc_text = f"{price_no_card} ‚ÇΩ (–±–µ–∑ –∫–∞—Ä—Ç—ã)" if price_no_card else "‚Äî"

            response += (
                f"üì¶ {safe_name}\n"
                f"üí≥ {pc_text}\n"
                f"üè∑ {pnc_text}\n"
                f"üîó <a href=\"{escape(url)}\">—Å—Å—ã–ª–∫–∞</a>\n\n"
            )

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤ HTML-—Ä–µ–∂–∏–º–µ ‚Äî —ç—Ç–æ —É–¥–æ–±–Ω–æ –¥–ª—è –ø—Ä–æ—Å—Ç—ã—Ö —Å—Å—ã–ª–æ–∫ –∏ –Ω–µ —Ç—Ä–µ–±—É–µ—Ç —ç–∫—Ä–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è Markdown
        await message.answer(response, parse_mode="HTML")

    # –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    user_states[user_id] = None
